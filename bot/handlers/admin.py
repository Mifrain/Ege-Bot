from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext


from states import admin_states
from keyboard.client_kb import *
from keyboard.admin_kb import *
from db import pydb



async def admin_menu(call: CallbackQuery):
    await call.message.delete()
    await call.answer()
    res = call.data.split('_')[1]
    if res == 'main':
        await call.message.answer('<b>‚öí –ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚öí</b>', reply_markup=await admin_kb(call.from_user.id))
        
    elif res == 'admin':
        opt = call.data.split('_')[2]
        if opt == 'add':
            await call.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>', reply_markup=admin_back_kb)
            await admin_states.AddAdminState.adm_id.set()
        elif opt == 'del':
            await call.message.answer('<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ID –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å</b>', reply_markup=await del_adm_kb())
        elif opt == 'delpage':
            page = call.data.split('_')[3]
            await call.message.answer(f'<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ID –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å</b>', reply_markup= await del_adm_kb(page))
        elif opt == 'delid':
            admin_id = call.data.split('_')[3]
            pydb.user_del_admin(admin_id)
            await call.message.answer('‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –£–¥–∞–ª–µ–Ωüë§</b> ‚úÖ', reply_markup=admin_back_kb)
        
    elif res == 'prot':
        opt = call.data.split('_')[2]
        if opt == 'choose':
            await call.message.answer('<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤üßæ</b>', reply_markup=admin_les_kb('prot'))
        elif opt == 'add':
            await call.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Ç–∏–ø, –∏–º—è, callback –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞</b>\n\n<i>–ü—Ä–∏–º–µ—Ä: rus, –ù–æ–º–µ—Ä 8, rus_protnum_8, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª</i>\n\n–¢–∏–ø—ã:\n–†—É—Å—Å–∫–∏–π –Ø–∑—ã–∫ - rus\n–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ë–∞–∑–∞ - mathbase\n–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ü—Ä–æ—Ñ–∏–ª—å - mathprof\n–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ - inf\n–ò—Ç–æ–≥–æ–≤–æ–µ –°–æ—á–∏–Ω–µ–Ω–∏–µ - is', reply_markup=admin_back_kb)
            await admin_states.AddProtState.new_prot.set()
        elif opt == 'del':
            await call.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ callback –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ</b>\n\n<i>–ü—Ä–∏–º–µ—Ä: rus_protnum_8</i>', reply_markup=admin_back_kb)
            await admin_states.DelProtState.del_prot.set()
            
    elif res == 'mat':
        opt = call.data.split('_')[2]
        if opt == 'choose':
            await call.message.answer('<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤üìÅ</b>', reply_markup=admin_les_kb('mat'))
        elif opt == 'add':
            await call.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Ç–∏–ø, –∏–º—è, callback, —Ñ–∞–π–ª –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞</b>\n\n<i>–ü—Ä–∏–º–µ—Ä: rus, –ù–æ–º–µ—Ä 8, rus_matnum_8, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª</i>\n\n–¢–∏–ø—ã:\n–†—É—Å—Å–∫–∏–π –Ø–∑—ã–∫ - rus\n–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ë–∞–∑–∞ - mathbase\n–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ü—Ä–æ—Ñ–∏–ª—å - mathprof\n–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ - inf\n–ò—Ç–æ–≥–æ–≤–æ–µ –°–æ—á–∏–Ω–µ–Ω–∏–µ - is', reply_markup=admin_back_kb)
            await admin_states.AddMatState.new_mat.set()
        elif opt == 'del':
            await call.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ callback –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ</b>\n\n<i>–ü—Ä–∏–º–µ—Ä: rus_matnum_8</i>', reply_markup=admin_back_kb)
            await admin_states.DelMatState.del_mat.set()



# STATES
async def add_admin(mess: Message, state=FSMContext):
    pydb.user_add_admin(mess.text)
    await mess.answer('‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –î–æ–±–∞–≤–ª–µ–Ωüë• </b>‚úÖ', reply_markup=admin_back_kb)
    await mess.delete()
    await state.finish()


async def back_admin_state(call: CallbackQuery,state=FSMContext):
    await call.answer()
    await call.message.delete()
    await call.message.answer('<b>‚öí –ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚öí</b>', reply_markup=await admin_kb(call.from_user.id))
    await state.finish()


async def change_les(mess: Message, state=FSMContext):
    prot = mess.text.split(',')
    opt =str(await state.get_state(FSMContext)).split(':')[1].split('_')
    if opt[0] == 'new':
        while len(prot) != 4:
            await mess.delete()
            if opt[1] == 'prot':
                await mess.answer('‚ùóÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É</b>‚ùóÔ∏è\n\n<i>–ü—Ä–∏–º–µ—Ä: rus, –ù–æ–º–µ—Ä 8, rus_protnum_8, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª</i>',  reply_markup=admin_back_kb)
            elif opt[1] == 'mat':
                await mess.answer('‚ùóÔ∏è<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É</b>‚ùóÔ∏è\n\n<i>–ü—Ä–∏–º–µ—Ä: rus, –ù–æ–º–µ—Ä 8, rus_matnum_8, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª</i>',  reply_markup=admin_back_kb)                
            await admin_states.AddProtState.first()
            break
        
        else:
            # –ü—Ä–∏–≤–æ–∂—É –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞—é –ø—Ä–æ–±–µ–ª—ã
            prot[0] = prot[0].lower().replace(' ', '')
            prot[1] = prot[1].replace(' ', '', 1)
            prot[2] = prot[2].lower().replace(' ', '')
            prot[3] = prot[3].replace(' ', '')
            
            if opt[1] == 'prot':
                pydb.add_lesson(prot, 'prot')
                await mess.answer('‚úÖ <b>–ü—Ä–æ—Ç–æ—Ç–∏–ø –î–æ–±–∞–≤–ª–µ–Ωüßæ</b>‚úÖ', reply_markup=admin_back_kb)
            elif opt[1] == 'mat':
                pydb.add_lesson(prot, 'mat')
                await mess.answer('‚úÖ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª –î–æ–±–∞–≤–ª–µ–ΩüìÅ</b>‚úÖ', reply_markup=admin_back_kb)
            await mess.delete()
            await state.finish()
    elif opt[0] == 'del':
        pydb.del_lesson(prot[0])
        if opt[1] == 'prot':
            await mess.answer('‚úÖ <b>–ü—Ä–æ—Ç–æ—Ç–∏–ø –£–¥–∞–ª–µ–Ωüßæ</b>‚úÖ', reply_markup=admin_back_kb)
        elif opt[1] == 'mat':
            await mess.answer('‚úÖ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª –£–¥–∞–ª–µ–ΩüìÅ</b>‚úÖ', reply_markup=admin_back_kb)
        await mess.delete()
        await state.finish()

    





def admin_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(back_admin_state, state = admin_states.AddAdminState.adm_id)
    dp.register_callback_query_handler(back_admin_state, state = admin_states.AddProtState.new_prot)
    dp.register_callback_query_handler(back_admin_state, state = admin_states.DelProtState.del_prot)
    dp.register_callback_query_handler(back_admin_state, state = admin_states.AddMatState.new_mat)
    dp.register_callback_query_handler(back_admin_state, state = admin_states.DelMatState.del_mat)
    
    dp.register_callback_query_handler(admin_menu, Text(startswith='adm_'))
    
    dp.register_message_handler(add_admin, state = admin_states.AddAdminState.adm_id)
    
    dp.register_message_handler(change_les, state = admin_states.AddProtState.new_prot)
    dp.register_message_handler(change_les, state = admin_states.DelProtState.del_prot)
    dp.register_message_handler(change_les, state = admin_states.AddMatState.new_mat)
    dp.register_message_handler(change_les, state = admin_states.DelMatState.del_mat)



