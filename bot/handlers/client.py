from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text

from keyboard.client_kb import *
from keyboard.lessons_kb import *
from db import pydb
from handlers.lessons import objects

async def default_commands(mess: Message):
    if mess.text == '/start':
        if not pydb.check_user(mess.from_user.id):
            pydb.add_user(mess.from_user.id)
        await mess.answer('<b>–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ —Å–¥–∞—á–µ–π –ï–ì–≠ –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–ºüìö!\n–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –º–Ω–æ–≥–æ –Ω—É–∂–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤üìÅ!\n\n–ñ–µ–ª–∞—é —Ö–æ—Ä–æ—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!</b>', reply_markup=start_kb)
    await mess.delete()


async def menu_callbackes(call: CallbackQuery):
    # await call.message.delete()
    await call.answer()
    res = call.data.split('_')[1]
    if res == 'main':
        await call.message.edit_text('üè†<b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>üè†', reply_markup=await main_kb(call.from_user.id))
    elif res == 'edc':
        await call.message.edit_text('<b>–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b>üìö\n\n<i>–ü—Ä–µ–¥–º–µ—Ç —Ç—ã –º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</i>', reply_markup=lessons_kb)
    elif res == 'prof':
        await call.message.edit_text(f"""<b>‚Ä¢ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üë§
  ‚ùØ –ò–º—è {(call.from_user.username).replace('<', '').replace('>', '')}
  ‚ùØ ID {call.from_user.id}</b>""", reply_markup=menu_back_kb)
    elif res == 'likes':
        if 'page' in call.data:
            page = call.data.split('_')[3]
        else:
            page = 0
        await call.message.edit_text(f'<b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚ù§Ô∏è</b>', reply_markup=await lesson_like_kb(call.from_user.id, page))
    elif res == 'sup':
        await call.message.edit_text('–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @mifrain_pr', reply_markup=menu_back_kb)



async def like_change(call: CallbackQuery):
    type = call.data.split('/')[1]
    less_call = call.data.split('/')[2]
    fromm = call.data.split('/')[3]
    
    less_type = 'prot'
    if 'mat' in less_call: less_type = 'mat'
    
    obj = less_call.split('_')[0]
    txt = objects.get(obj)
    name = pydb.name_lesson(less_call)

    
    if type == 'add':
        await call.answer('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ ‚ù§Ô∏è ‚úÖ', show_alert=True)
        pydb.add_like_lesson(call.from_user.id, less_call)
        await call.message.edit_text(f'{txt}\n\n<b>{name}</b>', reply_markup= await lesson_link_kb(less_call, less_type, call.from_user.id, fromm))

    elif type == 'del': 
        await call.answer('‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö üíî ‚ùå', show_alert=True)
        pydb.del_like_lesson(call.from_user.id, less_call)
        await call.message.edit_text(f'{txt}\n\n<b>{name}</b>', reply_markup= await lesson_link_kb(less_call, less_type, call.from_user.id, fromm))

    
    else:
        await call.answer()
        await call.message.edit_text(f'{txt}\n\n<b>{name}</b>', reply_markup= await lesson_link_kb(less_call, less_type, call.from_user.id, 'likes'))

 
    
    
    


def client_handlers(dp: Dispatcher):
    dp.register_message_handler(default_commands, commands=['start', 'help'])
    dp.register_callback_query_handler(menu_callbackes, Text(startswith='menu_'))
    dp.register_callback_query_handler(like_change, Text(startswith='like'))
