from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text

from keyboard.client_kb import *
from db import pydb

async def default_commands(mess: Message):
    if mess.text == '/start':
        if not pydb.check_user(mess.from_user.id):
            pydb.add_user(mess.from_user.id)
        await mess.answer('<b>–î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠</b>\n\n<b>–•–æ—Ä–æ—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!</b>', reply_markup=start_kb)
    await mess.delete()


async def menu_callbackes(call: CallbackQuery):
    await call.message.delete()
    await call.answer()
    res = call.data.split('_')[1]
    if res == 'main':
        await call.message.answer('üè†<b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>üè†', reply_markup=await main_kb(call.from_user.id))
    elif res == 'edc':
        await call.message.answer('<b>–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b>üìö\n\n<i>–ü—Ä–µ–¥–º–µ—Ç —Ç—ã –º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</i>', reply_markup=lessons_kb)
    elif res == 'prof':
        await call.message.answer(f"""<b>‚Ä¢ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üë§
  ‚ùØ –ò–º—è {call.from_user.username}
  ‚ùØ ID {call.from_user.id}
  ‚ùØ –†–µ—à–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ - 0</b>""", reply_markup=menu_back_kb)
    elif res == 'stat':
        await call.message.answer(f'<b>‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞: üìä\n  ‚ùØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–º–∏ - {len(pydb.all_users())}</b>', reply_markup=menu_back_kb)
    elif res == 'sup':
        await call.message.answer('–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @mifrain_pr', reply_markup=menu_back_kb)


def client_handlers(dp: Dispatcher):
    dp.register_message_handler(default_commands, commands=['start', 'help'])
    dp.register_callback_query_handler(menu_callbackes, Text(startswith='menu_'))
